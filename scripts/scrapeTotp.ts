import cliProgress from 'cli-progress';
import { createHash } from 'crypto';
import fs from 'fs/promises';
import path from 'path';
import sharp from 'sharp';

interface SiteData {
  name: string;
  domain: string;
}

interface ApiSite {
  0: string; // site name
  1: {
    domain: string;
    img?: string;
  };
}

const assetsPath = 'assets/custom-icons';

// Function to calculate SHA256 hash of a file
async function getFileHash(filePath: string): Promise<string> {
  try {
    const fileBuffer = await fs.readFile(filePath);
    const hashSum = createHash('sha256');
    hashSum.update(fileBuffer);
    return hashSum.digest('hex');
  } catch (error) {
    throw new Error(`Failed to calculate hash for ${filePath}: ${error}`);
  }
}

// Function to calculate hash of a buffer
function getBufferHash(buffer: Buffer): string {
  const hashSum = createHash('sha256');
  hashSum.update(buffer);
  return hashSum.digest('hex');
}

async function main(): Promise<void> {
  // Create assets directory if it doesn't exist
  try {
    await fs.access(assetsPath);
  } catch {
    await fs.mkdir(assetsPath, { recursive: true });
  }

  // Fetch TOTP data
  const response = await fetch('https://api.2fa.directory/v3/totp.json');
  const data: ApiSite[] = await response.json();

  const totps: SiteData[] = [];

  const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
  bar.start(data.length, 0);

  for (const site of data) {
    const siteName = site[0];
    const domain = site[1].domain;
    const img = site[1].img;
    const filePath = path.join(assetsPath, `${domain}.avif`);
    
    // Construct download URL
    const imgPath = img || `${domain}.svg`;
    const firstChar = img ? img[0] : domain[0];
    const url = `https://raw.githubusercontent.com/2factorauth/twofactorauth/master/img/${firstChar}/${imgPath}`;
    
    let shouldDownload = true;
    
    // Check if file already exists
    try {
      await fs.access(filePath);
      // File exists, check if we need to update it
      const existingFileHash = await getFileHash(filePath);
      
      try {
        const imgResponse = await fetch(url);
        if (!imgResponse.ok) {
          console.log(`Failed to get ${domain}: ${url}`);
          totps.push({ name: siteName, domain });
          bar.increment();
          continue;
        }

        const buffer = Buffer.from(await imgResponse.arrayBuffer());
        // Convert to AVIF format to compare with existing file
        const avifBuffer = await sharp(buffer)
          .resize(100, 100, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
          .avif()
          .toBuffer();
        
        const newFileHash = getBufferHash(avifBuffer);
        
        // If hashes match, the image hasn't changed
        if (existingFileHash === newFileHash) {
          shouldDownload = false;
        } else {
          console.log(`Updating ${domain} - image has changed`);
        }
      } catch (error) {
        // If we can't fetch or compare, just use the existing file
        shouldDownload = false;
      }
    } catch {
      // File doesn't exist, we need to download it
    }

    if (shouldDownload) {
      try {
        const imgResponse = await fetch(url);
        if (!imgResponse.ok) {
          console.log(`Failed to get ${domain}: ${url}`);
          bar.increment();
          continue;
        }

        const buffer = Buffer.from(await imgResponse.arrayBuffer());
        // For raster images, convert and resize to 100x100 avif
        await sharp(buffer)
          .resize(100, 100, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
          .avif()
          .toFile(filePath);
      } catch (error) {
        bar.increment();
        continue;
      }
    }
    
    totps.push({ name: siteName, domain });
    bar.increment();
  }

  bar.stop();

  console.log(`Total of ${totps.length} sites!`);

  // Save JSON file
  await fs.writeFile(
    'assets/totp.json',
    JSON.stringify(totps, null, 4),
    'utf-8'
  );

  // Generate customIcons.ts
  let customIconsContent = `/*
 * This file is automatically generated by scripts/scrapeTotp.ts.
 * Do not modify it directly.
 */

export const customIcons: { [key: string]: any } = {
`;

  for (const iconData of totps) {
    const filename = `${iconData.domain}.avif`;
    customIconsContent += `  '${filename}': require('../assets/custom-icons/${filename}'),\n`;
  }

  customIconsContent += '};\n';

  await fs.writeFile('utils/customIcons.ts', customIconsContent, 'utf-8');
  console.log('Generated utils/customIcons.ts');
}

main().catch(console.error);