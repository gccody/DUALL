import cliProgress from 'cli-progress';
import fs from 'fs/promises';
import path from 'path';
import sharp from 'sharp';

interface SiteData {
  name: string;
  domain: string;
}

interface ApiSite {
  0: string; // site name
  1: {
    domain: string;
    img?: string;
  };
}

const assetsPath = 'assets/custom-icons';

async function main(): Promise<void> {
  // Create assets directory if it doesn't exist
  try {
    await fs.access(assetsPath);
  } catch {
    await fs.mkdir(assetsPath, { recursive: true });
  }

  // Fetch TOTP data
  const response = await fetch('https://api.2fa.directory/v3/totp.json');
  const data: ApiSite[] = await response.json();

  const totps: SiteData[] = [];

  const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
  bar.start(data.length, 0);

  for (const site of data) {
    const siteName = site[0];
    const domain = site[1].domain;
    const img = site[1].img;
    const extension = img ? img.split('.').pop() : 'svg';

    // Check if file already exists
    const filePath = path.join(assetsPath, `${domain}.png`);
    try {
      await fs.access(filePath);
      totps.push({ name: siteName, domain });
      bar.increment();
      continue;
    } catch {
      // File doesn't exist, continue to download
    }

    // Construct download URL
    const imgPath = img || `${domain}.svg`;
    const firstChar = img ? img[0] : domain[0];
    const url = `https://raw.githubusercontent.com/2factorauth/twofactorauth/master/img/${firstChar}/${imgPath}`;

    try {
      const imgResponse = await fetch(url);
      if (!imgResponse.ok) {
        console.log(`Failed to get ${domain}: ${url}`);
        continue;
      }

      const buffer = Buffer.from(await imgResponse.arrayBuffer());

      if (extension === 'svg') {
        // Convert SVG to PNG using sharp
        const pngPath = path.join(assetsPath, `${domain}.png`);
        await sharp(buffer).png().toFile(pngPath);
      } else if (extension) {
        // Save other formats as-is
        await fs.writeFile(filePath, buffer);
      }

      totps.push({ name: siteName, domain });
    } catch (error) {
      continue;
    }
    bar.increment();
  }

  bar.stop();

  console.log(`Total of ${totps.length} sites!`);

  // Save JSON file
  await fs.writeFile(
    'assets/totp.json',
    JSON.stringify(totps, null, 4),
    'utf-8'
  );

  // Generate customIcons.ts
  let customIconsContent = `/*
 * This file is automatically generated by scripts/scrapeTotp.ts.
 * Do not modify it directly.
 */

export const customIcons: { [key: string]: any } = {
`;

  for (const iconData of totps) {
    const filename = `${iconData.domain}.png`;
    customIconsContent += `  '${filename}': require('../assets/custom-icons/${filename}'),\n`;
  }

  customIconsContent += '};\n';

  await fs.writeFile('utils/customIcons.ts', customIconsContent, 'utf-8');
  console.log('Generated utils/customIcons.ts');
}

main().catch(console.error);